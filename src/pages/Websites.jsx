// import { useKeycloak } from '@react-keycloak/web';
// import React, { useEffect, useState } from 'react';
// import '../styles/Websites.css';

// const Websites = () => {
//   const { keycloak, initialized } = useKeycloak();
//   const [websites, setWebsites] = useState([]);
//   const [url, setUrl] = useState('');

//   const fetchWebsites = async () => {
//     try {
//       const response = await fetch('http://localhost:8081/api/get_url', {
//         headers: {
//           Authorization: `Bearer ${keycloak.token}`,
//         },
//       });
//       const data = await response.json();
//       setWebsites(data);
//     } catch (error) {
//       console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', error);
//     }
//   };

//   useEffect(() => {
//     if (initialized && keycloak.authenticated) {
//       fetchWebsites();
//     }
//   }, [initialized, keycloak]);

//   const handleAddWebsite = async () => {
//     if (!url.trim()) return;

//     try {
//       await fetch('http://localhost:8081/api/register_url', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//           Authorization: `Bearer ${keycloak.token}`,
//         },
//         body: JSON.stringify({ url }),
//       });
//       setUrl('');
//       fetchWebsites();
//     } catch (error) {
//       console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', error);
//     }
//   };

//   const handleDeleteWebsite = async (id) => {
//     try {
//       await fetch(`http://localhost:8081/api/websites/${id}`, {
//         method: 'DELETE',
//         headers: {
//           Authorization: `Bearer ${keycloak.token}`,
//         },
//       });
//       fetchWebsites();
//     } catch (error) {
//       console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', error);
//     }
//   };

//   if (!initialized) {
//     return <div>Loading...</div>;
//   }

//   return (
//     <>
//       {/* Navbar
//       <div className="navbar">
//         <div className="navbar-left">
//           <div className="logo-circle" />
//         </div>
//         <div className="nav-links">
//           <Link to="/">Home</Link>
//           <Link to="/dashboard">Dashboard</Link>
//           <Link to="/website">Websites</Link>
//           <Link to="/courses">Insurances</Link>
//           <a href="#" onClick={() => keycloak.logout()}>Sign out</a>
//         </div>
//       </div> */}

//       <div className="websites-container">
//         <h2 className="title">üåê ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</h2>

//         <div className="input-group">
//           <input
//             type="text"
//             placeholder="https://example.com"
//             value={url}
//             onChange={(e) => setUrl(e.target.value)}
//           />
//           <button className="add-btn" onClick={handleAddWebsite}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</button>
//         </div>

//         <div className="website-list">
//           {websites.map((site) => (
//             <div key={site.id} className="website-item">
//               <div className="website-info">
//                 <strong>{site.name || site.url}</strong>
//                 <div>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(site.createdAt).toLocaleString()}</div>
//               </div>
//               <button className="delete-btn" onClick={() => handleDeleteWebsite(site.id)}>üóë ‡∏•‡∏ö</button>
//             </div>
//           ))}
//         </div>
//       </div>
//     </>
//   );
// };

// export default Websites;

import { useKeycloak } from '@react-keycloak/web';
import React, { useEffect, useState } from 'react';
import '../styles/Websites.css';

const Websites = () => {
  const { keycloak, initialized } = useKeycloak();
  const [websites, setWebsites] = useState([]);
  const [url, setUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchWebsites = async () => {
    if (!initialized || !keycloak.authenticated) return;
    
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('http://localhost:8081/api/get_url', {
        headers: {
          Authorization: `Bearer ${keycloak.token}`,
        },
      });
      
      const data = await response.json();
      console.log('API Response:', data); // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (Array.isArray(data)) {
        setWebsites(data);
      } else if (data && typeof data === 'object') {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö { websites: [...] } ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ property ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô array
        if (data.websites && Array.isArray(data.websites)) {
          setWebsites(data.websites);
        } else if (data.data && Array.isArray(data.data)) {
          setWebsites(data.data);
        } else if (data.urls && Array.isArray(data.urls)) {
          setWebsites(data.urls);
        } else {
          // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
          setWebsites([data]);
        }
      } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        setWebsites([]);
        setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', error);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå');
      setWebsites([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (initialized && keycloak.authenticated) {
      fetchWebsites();
    }
  }, [initialized, keycloak.authenticated]);

  const handleAddWebsite = async () => {
    if (!url.trim()) return;

    try {
      await fetch('http://localhost:8081/api/register_url', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${keycloak.token}`,
        },
        body: JSON.stringify({ url }),
      });
      setUrl('');
      fetchWebsites();
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', error);
    }
  };

  const handleDeleteWebsite = async (id) => {
    try {
      await fetch(`http://localhost:8081/api/websites/${id}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${keycloak.token}`,
        },
      });
      fetchWebsites();
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:', error);
    }
  };

  if (!initialized) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <div className="websites-container">
        <h2 className="title">üåê ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</h2>

        <div className="input-group">
          <input
            type="text"
            placeholder="https://example.com"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
          />
          <button className="add-btn" onClick={handleAddWebsite}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</button>
        </div>

        {loading ? (
          <div className="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
        ) : error ? (
          <div className="error">{error}</div>
        ) : (
          <div className="website-list">
            {Array.isArray(websites) && websites.length > 0 ? (
              websites.map((site, index) => (
                <div key={site.id || index} className="website-item">
                  <div className="website-info">
                    <strong>{site.name || site.url}</strong>
                    <div>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: {site.createdAt ? new Date(site.createdAt).toLocaleString() : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                  </div>
                  <button className="delete-btn" onClick={() => handleDeleteWebsite(site.id)}>üóë ‡∏•‡∏ö</button>
                </div>
              ))
            ) : (
              <div className="no-websites">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</div>
            )}
          </div>
        )}
      </div>
    </>
  );
};

export default Websites;